
name: Build and deploy to PyPi

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  push:
    branches: [ "main", "develop" ]
    # Publish semver tags as releases.
    tags: [ 'v*' ]
  pull_request:
    branches: [ "main" ]

env:
  ASSET_FILNAME: ${{ github.ref_name }} 

jobs:
  build:
    name: Build wheels
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This repository uses git-lfs, so we need to enable support.
          # Otherwise, the lfs files won't be properly pulled.
          lfs: true

      - name: Pull from git lfs
        run: git lfs pull

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "0.4.27"
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      # - name: Install the project from lock file 
      #   run: uv sync --frozen --dev --all-extras

      - name: Bump the version number if a tag isn't specified
        # This help differentiate development builds on Test PyPi
        if: github.event_name != 'tag'
        run: uvx run bump-my-version bump patch

      - name: Build source and wheels
        run: uv build

      - name: Create tagged release 
        if: github.event_name == 'tag'
        uses: marvinpinto/action-automatic-releases@latest #@TODO A specific version should be specified here, rather than latest.
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false

      - name: Publish to PyPi (production)
        if: github.event_name == 'tag'
        run: uv publish --token ${{ secrets.PYPI_TOKEN }}

      - name: Publish to TestPyPi (development)
        if: github.event_name == 'push'
        run: uv publish --publish-url https://test.pypi.org/legacy/ --token ${{ secrets.TESTPYPI_TOKEN }}


